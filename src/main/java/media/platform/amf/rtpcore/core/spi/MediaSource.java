package media.platform.amf.rtpcore.core.spi;

public interface MediaSource extends Component {

    /**
     * Defines the delay between <code>startScheduler()</code> call and actual media
     * streaming beginning.
     * 
     * After successful startScheduler this value will be changed to zero. The new value
     * must be assigned before each startScheduler.
     * 
     * @param initialDelay the value of delay measured in nanoseconds.
     */
    public void setInitialDelay(long initialDelay);
    
    /**
     * Starts media processing.
     */
    public void start();
    
    /**
     * Terminates media processing.
     */
    public void stop();
    
    /**
     * Gets the current media time position.
     * 
     * @return the current media time position in milliseconds.
     */
    public long getMediaTime();
    
    /**
     * Assigns media time from which this component should startScheduler media data.
     * 
     * @param time the value measured in nanoseconds.
     */
    public void setMediaTime(long time);
    
    /**
     * Returns duration of the signal generated by this component if 
     * it is known.
     * 
     * @return the duration of the signal in milliseconds or -1 if not known.
     */
    public long getDuration();
    
    /**
     * Sets maximum duration for the signal generated by media source
     * 
     * @param duration the positive value in nanoseconds.
     */
    public void setDuration(long duration);
    
    /**
     * Gets the state of the component.
     * 
     * @return  true if component is connected to other component.
     */
    public boolean isConnected();
    
    /**
     * Gets true if component is transmitting media.
     * 
     * @return true if component is transmitting media.
     */
    public boolean isStarted();
    
    /**
     * Shows the number of packets received by this medis sink since last startScheduler.
     * 
     * @return the number of packets.
     */
    public long getPacketsTransmitted();
    
    /**
     * Shows the number of bytes received by this sink since last startScheduler;
     * 
     * @return the number of bytes.
     */
    public long getBytesTransmitted();

    
}
