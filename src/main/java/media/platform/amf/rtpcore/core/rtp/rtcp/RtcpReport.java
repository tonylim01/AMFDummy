package media.platform.amf.rtpcore.core.rtp.rtcp;

import java.util.ArrayList;
import java.util.List;

public abstract class RtcpReport extends RtcpHeader {

	/**
	 * Source that generated the report
	 */
	public long ssrc;

	/**
	 * Reports coming from other sync sources
	 */
	protected List<RtcpReportBlock> reportBlocks;
	
	protected RtcpReport() {
		this.reportBlocks = new ArrayList<RtcpReportBlock>(RtcpPacket.MAX_SOURCES);
	}

	protected RtcpReport(boolean padding, long ssrc, int packetType) {
		super(padding, packetType);
		this.ssrc = ssrc;
		this.reportBlocks = new ArrayList<RtcpReportBlock>(RtcpPacket.MAX_SOURCES);
	}

	/**
	 * Tells whether this reports was generated by a sender or a receiver.
	 * 
	 * @return Whether this is a Sender Report or not.
	 */
	public abstract boolean isSender();
	
	public long getSsrc() {
		return this.ssrc;
	}
	
	public RtcpReportBlock[] getReportBlocks() {
		RtcpReportBlock[] blocks = new RtcpReportBlock[this.reportBlocks.size()];
		return this.reportBlocks.toArray(blocks);
	}
	
	public RtcpReportBlock getReportBlock(long ssrc) {
		for (RtcpReportBlock report : this.reportBlocks) {
			if(report.getSsrc() == ssrc) {
				return report;
			}
		}
		return null;
	}

	public void addReceiverReport(RtcpReportBlock rtcpReceptionReportItem) {
		if(this.count >= RtcpPacket.MAX_SOURCES) {
			throw new ArrayIndexOutOfBoundsException("Reached maximum number of items: "+ RtcpPacket.MAX_SOURCES);
		}
		this.reportBlocks.add(rtcpReceptionReportItem);
		this.count++;
	}
}
